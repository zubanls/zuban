[case overloaded_signatures]
#? --codepoint-column 4 signatures
str()
#? --codepoint-column 19 signatures
str(b'12', errors='ignore')

[out]
__main__.py:2:call signatures:
- "(object: object =) -> str", valid with params: true, on nth param: Some(0)
- "(object: Buffer, encoding: str =, errors: str =) -> str", valid with params: true, on nth param: Some(0)
__main__.py:4:call signatures:
- "(object: object =) -> str", valid with params: false, on nth param: None
- "(object: Buffer, encoding: str =, errors: str =) -> str", valid with params: true, on nth param: Some(2)

[case union_signatures]
class A:
    def __init__(self, x: int): ...
class B:
    def __init__(self, y: str): ...

def f(x: type[A] | type[B]):
    #? --codepoint-column 6 signatures
    x()  # E: Missing positional argument "x" in call to "A"  # E: Missing positional argument "y" in call to "B"
    #? --codepoint-column 6 signatures
    x(1)  # E: Argument 1 to "B" has incompatible type "int"; expected "str"

[out]
__main__.py:8:call signatures:
- "(x: int) -> A", valid with params: true, on nth param: Some(0)
- "(y: str) -> B", valid with params: true, on nth param: Some(0)
__main__.py:10:call signatures:
- "(x: int) -> A", valid with params: true, on nth param: Some(0)
- "(y: str) -> B", valid with params: true, on nth param: Some(0)

[case param_spec_signatures]
from typing import Callable

def f[**P](x: int, *args: P.args, **kwargs: P.kwargs) -> Callable[P, str]: ...

#? --codepoint-column 2 signatures
f(1)
#? --codepoint-column 9 signatures
f(1, 2, 3)

[out]
__main__.py:6:call signatures:
- "(x: int, *args: P, **kwargs: P) -> Callable[P, str]", valid with params: true, on nth param: Some(0)
__main__.py:8:call signatures:
- "(x: int, *args: P, **kwargs: P) -> Callable[P, str]", valid with params: true, on nth param: Some(1)

[case tuple_unpack_signatures]
from typing import Callable

def f[*Ts](x: int, *args: *Ts) -> tuple[int, *Ts]: ...
def g(x: int, *args: *tuple[*tuple[str, ...], int]) -> tuple[int, *tuple[str, ...]]: ...

#? --codepoint-column 2 signatures
f(1)
#? --codepoint-column 9 signatures
f(1, 2, 3)
#? --codepoint-column 2 signatures
g(1, 1)
#? --codepoint-column 9 signatures
g(1, "x", 3)

[out]
__main__.py:7:call signatures:
- "(x: int, *args: tuple[Unpack[Ts]]) -> tuple[int, Unpack[Ts]]", valid with params: true, on nth param: Some(0)
__main__.py:9:call signatures:
- "(x: int, *args: tuple[Unpack[Ts]]) -> tuple[int, Unpack[Ts]]", valid with params: true, on nth param: Some(1)
__main__.py:11:call signatures:
- "(x: int, *args: tuple[Unpack[Tuple[str, ...]], int]) -> tuple[int, Unpack[Tuple[str, ...]]]", valid with params: true, on nth param: Some(1)
__main__.py:13:call signatures:
- "(x: int, *args: tuple[Unpack[Tuple[str, ...]], int]) -> tuple[int, Unpack[Tuple[str, ...]]]", valid with params: true, on nth param: Some(1)
