[case literal_union_formatting1]
from typing import Literal

a: int
b: str | Literal[1, 2] | float
a = b  # E: Incompatible types in assignment (expression has type "Literal[1, 2] | str | float", variable has type "int")

[case literal_union_formatting2]
from typing import Literal

a: int
b: str | Literal[1, 2] | float
c: str | Literal[1, 2] | float | Literal['x']
d: Literal[1] | Literal['x']

def x(y: int) -> None: ...
x(a)
x(b)  # E: Argument 1 to "x" has incompatible type "Literal[1, 2] | str | float"; expected "int"
x(c)  # E: Argument 1 to "x" has incompatible type "Literal[1, 2, 'x'] | str | float"; expected "int"
x(d)  # E: Argument 1 to "x" has incompatible type "Literal[1, 'x']"; expected "int"

[case literal_union_formatting_through_type_vars]
from typing import Literal, TypeVar

T = TypeVar("T")

l: Literal[3]
u: Literal[3] | list[int]

def foo(x: T) -> str | Literal[1, 2] | float | Literal['x'] | T: ...

def x(y: int) -> None: ...
x(foo(l))  # E: Argument 1 to "x" has incompatible type "Literal[1, 2, 3] | float | str"; expected "int"
x(foo(u))  # E: Argument 1 to "x" has incompatible type "Literal[1, 2, 3] | float | str | list[int]"; expected "int"

[case str_literal_assignment]
# Like testLiteralFromTypingWorks, but for strings
from typing import Literal

x: Literal["foo"]
x = "bar"  # E: Incompatible types in assignment (expression has type "Literal['bar']", variable has type "Literal['foo']")

y: Literal["bar"]
y = "bar"

[case avoid_long_literal_in_tuple_explosion]
x = dict([
    (1, ("00",)),
    (1, ("01",)),
    (1, ("02",)),
])
reveal_type(x)  # N: Revealed type is "dict[int, tuple[str]]"

y = dict([
    (b'', 3),
    (b'', 4),
    (b'', 5),
])
reveal_type(y)  # N: Revealed type is "dict[bytes, int]"

[case lots_of_literals_avoid_replacing]
from typing import Literal
NUMS = Literal[
    1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,
    31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,
    58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,
    85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,
    109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,
    130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,
    151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,
    172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,
    193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,
    214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,
    235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,
    256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,
    277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,
    298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,
    319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,337,338,339,
    340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,
    361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,376,377,378,379,380,381,
    382,383,384,385,386,387,388,389,390,391,392,393,394,395,396,397,398,399,400,401,402,
    403,404,405,406,407,408,409,410,411,412,413,414,415,416,417,418,419,420,421,422,423,
    424,425,426,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,
    445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,465,
    466,467,468,469,470,471,472,473,474,475,476,477,478,479,480,481,482,483,484,485,486,
    487,488,489,490,491,492,493,494,495,496,497,498,499,500,501,502,503,504,505,506,507,
    508,509,510,511,512,513,514,515,516,517,518,519,520,521,522,523,524,525,526,527,528,
    529,530,531,532,533,534,535,536,537,538,539,540,541,542,543,544,545,546,547,548,549,
    550,551,552,553,554,555,556,557,558,559,560,561,562,563,564,565,566,567,568,569,570,
    571,572,573,574,575,576,577,578,579,580,581,582,583,584,585,586,587,588,589,590,591,
    592,593,594,595,596,597,598,599,600,601,602,603,604,605,606,607,608,609,610,611,612,
    613,614,615,616,617,618,619,620,621,622,623,624,625,626,627,628,629,630,631,632,633,
    634,635,636,637,638,639,640,641,642,643,644,645,646,647,648,649,650,651,652,653,654,
    655,656,657,658,659,660,661,662,663,664,665,666,667,668,669,670,671,672,673,674,675,
    676,677,678,679,680,681,682,683,684,685,686,687,688,689,690,691,692,693,694,695,696,
    697,698,699,700,701,702,703,704,705,706,707,708,709,710,711,712,713,714,715,716,717,
    718,719,720,721,722,723,724,725,726,727,728,729,730,731,732,733,734,735,736,737,738,
    739,740,741,742,743,744,745,746,747,748,749,750,751,752,753,754,755,756,757,758,759,
    760,761,762,763,764,765,766,767,768,769,770,771,772,773,774,775,776,777,778,779,780,
    781,782,783,784,785,786,787,788,789,790,791,792,793,794,795,796,797,798,799,800,801,
    802,803,804,805,806,807,808,809,810,811,812,813,814,815,816,817,818,819,820,821,822,
    823,824,825,826,827,828,829,830,831,832,833,834,835,836,837,838,839,840,841,842,843,
    844,845,846,847,848,849,850,851,852,853,854,855,856,857,858,859,860,861,862,863,864,
    865,866,867,868,869,870,871,872,873,874,875,876,877,878,879,880,881,882,883,884,885,
    886,887,888,889,890,891,892,893,894,895,896,897,898,899,900,901,902,903,904,905,906,
    907,908,909,910,911,912,913,914,915,916,917,918,919,920,921,922,923,924,925,926,927,
    928,929,930,931,932,933,934,935,936,937,938,939,940,941,942,943,944,945,946,947,948,
    949,950,951,952,953,954,955,956,957,958,959,960,961,962,963,964,965,966,967,968,969,
    970,971,972,973,974,975,976,977,978,979,980,981,982,983,984,985,986,987,988,989,990,
    991,992,993,994,995,996,997,998,999,1000
]
x: NUMS
class Foo:
    @classmethod
    def x(cls, x: NUMS) -> NUMS: ...

Foo.x(1)

[case int_literal_math_operations]
# Most of this is happening in Mypy in constant_fold_expr
reveal_type(1 + 2)  # N: Revealed type is "Literal[3]?"
reveal_type(2 * 2 * 3)  # N: Revealed type is "Literal[12]?"
reveal_type(2 * 3 * 4)  # N: Revealed type is "Literal[24]?"
reveal_type(2 + 3 * 4)  # N: Revealed type is "Literal[14]?"
reveal_type(2 ** 10)  # N: Revealed type is "Literal[1024]?"
reveal_type(2 ** 30)  # N: Revealed type is "Literal[1073741824]?"

# Really high numbers
from typing import Final, Literal
x: Final = 1024 * 1024
# 40 bits
reveal_type(x * x)  # N: Revealed type is "Literal[1099511627776]?"
# 80 bits
reveal_type(x * x * x * x)  # N: Revealed type is "int"
# 200 bits
reveal_type(2 ** 200)  # N: Revealed type is "int"

reveal_type(2 ** -10)  # N: Revealed type is "float"
reveal_type(2 ** -200)  # N: Revealed type is "float"

def f(x: Literal[5, 4]):
    reveal_type(x * x)  # N: Revealed type is "Literal[25]? | Literal[20]? | Literal[16]?"

[case int_literal_division_like_operations]
reveal_type( 16 //  3)  # N: Revealed type is "Literal[5]?"
reveal_type(-16 // -3)  # N: Revealed type is "Literal[5]?"
reveal_type(-16 //  3)  # N: Revealed type is "Literal[-6]?"
reveal_type( 16 // -3)  # N: Revealed type is "Literal[-6]?"

reveal_type( 16 /  3)  # N: Revealed type is "float"
reveal_type(-16 / -3)  # N: Revealed type is "float"
reveal_type(-16 /  3)  # N: Revealed type is "float"
reveal_type( 16 / -3)  # N: Revealed type is "float"

reveal_type( 16 %  3)  # N: Revealed type is "Literal[1]?"
reveal_type(-16 % -3)  # N: Revealed type is "Literal[-1]?"
reveal_type(-16 %  3)  # N: Revealed type is "Literal[2]?"
reveal_type( 16 % -3)  # N: Revealed type is "Literal[-2]?"

if bool():
    reveal_type(5 // 0)  # E: Division by zero  # N: Revealed type is "Any"
if bool():
    reveal_type(5 % 0)  # E: Division by zero  # N: Revealed type is "Any"
if bool():
    reveal_type(5 / 0)  # E: Division by zero  # N: Revealed type is "Any"

reveal_type(2 // 2)  # N: Revealed type is "Literal[1]?"
reveal_type(0 % 3)   # N: Revealed type is "Literal[0]?"

[case int_literal_binary_operations]
reveal_type(6 & 3)  # N: Revealed type is "Literal[2]?"
reveal_type(-6 & 3)  # N: Revealed type is "Literal[2]?"
reveal_type(6 & -3)  # N: Revealed type is "Literal[4]?"
reveal_type(-6 & -3)  # N: Revealed type is "Literal[-8]?"

reveal_type(6 | 3)  # N: Revealed type is "Literal[7]?"
reveal_type(-6 | 3)  # N: Revealed type is "Literal[-5]?"
reveal_type(6 | -3)  # N: Revealed type is "Literal[-1]?"
reveal_type(-6 | -3)  # N: Revealed type is "Literal[-1]?"

reveal_type(6 ^ 3)  # N: Revealed type is "Literal[5]?"
reveal_type(-6 ^ 3)  # N: Revealed type is "Literal[-7]?"
reveal_type(6 ^ -3)  # N: Revealed type is "Literal[-5]?"
reveal_type(-6 ^ -3)  # N: Revealed type is "Literal[7]?"

reveal_type(6 ^ 3)  # N: Revealed type is "Literal[5]?"
reveal_type(-6 ^ 3)  # N: Revealed type is "Literal[-7]?"
reveal_type(6 ^ -3)  # N: Revealed type is "Literal[-5]?"
reveal_type(-6 ^ -3)  # N: Revealed type is "Literal[7]?"

reveal_type(2 << 3)  # N: Revealed type is "Literal[16]?"
reveal_type(-2 << 3)  # N: Revealed type is "Literal[-16]?"
reveal_type(2 << 0)  # N: Revealed type is "Literal[2]?"

reveal_type(2 >> 3)  # N: Revealed type is "Literal[0]?"
reveal_type(-2 >> 3)  # N: Revealed type is "Literal[-1]?"
reveal_type(16 >> 3)  # N: Revealed type is "Literal[2]?"
reveal_type(-16 >> 3)  # N: Revealed type is "Literal[-2]?"

reveal_type(2 << -3)  # E: Negative shift count  # N: Revealed type is "Any"
reveal_type(2 >> -3)  # E: Negative shift count  # N: Revealed type is "Any"

[case bool_literal_operations]
reveal_type(True | False)  # N: Revealed type is "Literal[True]?"
reveal_type(True & False)  # N: Revealed type is "Literal[False]?"
reveal_type(False ^ True)  # N: Revealed type is "Literal[True]?"

reveal_type(True ^ 0)  # N: Revealed type is "Literal[1]?"
reveal_type(5 ^ True)  # N: Revealed type is "Literal[4]?"

reveal_type(True * False)  # N: Revealed type is "Literal[0]?"
reveal_type(True << True)  # N: Revealed type is "Literal[2]?"
reveal_type(True / False)  # E: Division by zero  # N: Revealed type is "Any"

[case string_literal_additions]
from typing import Literal, Final

x: Final = "abc"

reveal_type("a" + r"b\a")  # N: Revealed type is "Literal['ab\\a']?"
reveal_type(x + "b")  # N: Revealed type is "Literal['abcb']?"
reveal_type(x + "b" + x)  # N: Revealed type is "Literal['abcbabc']?"

[case bytes_literal_additions]
from typing import Literal, Final

x: Final = b"abc"

reveal_type(b"a" + rb"b\a")  # N: Revealed type is "Literal[b'ab\\a']?"
reveal_type(x + b"b")  # N: Revealed type is "Literal[b'abcb']?"
reveal_type(x + b"b" + x)  # N: Revealed type is "Literal[b'abcbabc']?"

[case string_literal_multiplication_mypy_compatible]
# flags: --mypy-compatible
from typing import Literal, Final

x: Final = "abc"
reveal_type("a" * 3)  # N: Revealed type is "Literal['aaa']?"
reveal_type(3 * "a")  # N: Revealed type is "Literal['aaa']?"
reveal_type(x * 3)  # N: Revealed type is "Literal['abcabcabc']?"
reveal_type(3 * x)  # N: Revealed type is "Literal['abcabcabc']?"

reveal_type(x + "b" * 2)  # N: Revealed type is "Literal['abcbb']?"

reveal_type(x * 1000000)  # N: Revealed type is "LiteralString"
reveal_type(1000000 * x)  # N: Revealed type is "LiteralString"

def f(i: int, l: Literal[1, 2], strs: Literal['a', 'b']):
    reveal_type(x * i)  # N: Revealed type is "str"
    reveal_type(i * x)  # N: Revealed type is "str"
    reveal_type(l * strs)  # N: Revealed type is "Literal['a']? | Literal['b']? | Literal['aa']? | Literal['bb']?"
    reveal_type(strs * l)  # N: Revealed type is "Literal['a']? | Literal['aa']? | Literal['b']? | Literal['bb']?"

[case string_literal_multiplication_no_mypy_compatible]
# flags: --no-mypy-compatible
from typing import Literal, Final

x: Final = "abc"
reveal_type("a" * 3)  # N: Revealed type is "Literal['aaa']?"
reveal_type(3 * "a")  # N: Revealed type is "Literal['aaa']?"
reveal_type(x * 3)  # N: Revealed type is "Literal['abcabcabc']?"
reveal_type(3 * x)  # N: Revealed type is "Literal['abcabcabc']?"

reveal_type(x + "b" * 2)  # N: Revealed type is "Literal['abcbb']?"

reveal_type(x * 1000000)  # N: Revealed type is "LiteralString"
reveal_type(1000000 * x)  # N: Revealed type is "LiteralString"

def f(i: int, l: Literal[1, 2], strs: Literal['a', 'b']):
    reveal_type(x * i)  # N: Revealed type is "LiteralString"
    reveal_type(i * x)  # N: Revealed type is "LiteralString"
    reveal_type(l * strs)  # N: Revealed type is "Literal['a']? | Literal['b']? | Literal['aa']? | Literal['bb']?"
    reveal_type(strs * l)  # N: Revealed type is "Literal['a']? | Literal['aa']? | Literal['b']? | Literal['bb']?"

[case bytes_literal_multiplication]
from typing import Literal, Final

x: Final = b"abc"

reveal_type(b"a" * 3)  # N: Revealed type is "Literal[b'aaa']?"
reveal_type(3 * b"a")  # N: Revealed type is "Literal[b'aaa']?"
reveal_type(x + b"b" * 2)  # N: Revealed type is "Literal[b'abcbb']?"
reveal_type(x * 3)  # N: Revealed type is "Literal[b'abcabcabc']?"
reveal_type(3 * x)  # N: Revealed type is "Literal[b'abcabcabc']?"
reveal_type(x * 1000000)  # N: Revealed type is "bytes"
reveal_type(1000000 * x)  # N: Revealed type is "bytes"

def f(i: int, l: Literal[1, 2], bytes: Literal[b'a', b'b']):
    reveal_type(x * i)  # N: Revealed type is "bytes"
    reveal_type(i * x)  # N: Revealed type is "bytes"
    reveal_type(l * bytes)  # N: Revealed type is "Literal[b'a']? | Literal[b'b']? | Literal[b'aa']? | Literal[b'bb']?"
    reveal_type(bytes * l)  # N: Revealed type is "Literal[b'a']? | Literal[b'aa']? | Literal[b'b']? | Literal[b'bb']?"

[case left_shift_should_not_overflow]
reveal_type(2<<62)    # N: Revealed type is "int"
reveal_type(126<<63)  # N: Revealed type is "int"
reveal_type(2<<120)    # N: Revealed type is "int"

reveal_type(-2<<62)    # N: Revealed type is "Literal[-9223372036854775808]?"
reveal_type(-2<<63)    # N: Revealed type is "int"
reveal_type(-2<<64)    # N: Revealed type is "int"
reveal_type(-2<<120)    # N: Revealed type is "int"

reveal_type(-2<<120)    # N: Revealed type is "int"

reveal_type(-2<<3)    # N: Revealed type is "Literal[-16]?"

reveal_type(5<<62)     # N: Revealed type is "int"
reveal_type(-11<<63)   # N: Revealed type is "int"

[case avoid_slowdown_for_literal_power]
reveal_type(3 * 5)  # N: Revealed type is "Literal[15]?"
reveal_type(2924321745985571 ** 50000000000)  # N: Revealed type is "int"

[case non_i64_literals]
from typing import Literal
i: Literal[9223372036854775808]

reveal_type(i)  # N: Revealed type is "Literal[9223372036854775808]"
reveal_type(i + i)  # N: Revealed type is "int"
