[case tuple_none]
x: tuple[None]
reveal_type(x.__getitem__(0)) # N: Revealed type is "None"
reveal_type(x.index(0)) # N: Revealed type is "int"

[case tuple_methods_empty]
x: tuple[()]
reveal_type(x.__getitem__(0)) # N: Revealed type is "Never"
reveal_type(x.index(0)) # N: Revealed type is "int"

[case tuple_methods_one]
x: tuple[str]
reveal_type(x.__getitem__(0)) # N: Revealed type is "str"
reveal_type(x.index(0)) # N: Revealed type is "int"

[case tuple_methods_multiple]
x: tuple[int, str]
reveal_type(x.__getitem__(0)) # N: Revealed type is "int | str"
reveal_type(x.index(0)) # N: Revealed type is "int"

[case tuple_none_arbitrary]
x: tuple[None, ...]
reveal_type(x.__getitem__(0)) # N: Revealed type is "None"
reveal_type(x.index(0)) # N: Revealed type is "int"

[case tuple_methods_empty_arbitrary]
x: tuple[(), ...]  # E: Syntax error in type annotation \
                   # N: Suggestion: Use Tuple[T1, ..., Tn] instead of (T1, ..., Tn)
reveal_type(x.__getitem__(0)) # N: Revealed type is "Any"
reveal_type(x.index(0)) # N: Revealed type is "int"

[case tuple_methods_one_arbitrary]
x: tuple[str, ...]
reveal_type(x.__getitem__(0)) # N: Revealed type is "str"
reveal_type(x.index(0)) # N: Revealed type is "int"

[case tuple_methods_multiple_illegal_arbitrary]
-- TODO reenable this
-- x: tuple[int, str, ...]
-- reveal_type(x.__getitem__(0)) # N: Revealed type is "object"
-- reveal_type(x.index(0)) # N: Revealed type is "int"

[case tuple_methods_multiple_arbitrary]
y: tuple[int | str, ...]
reveal_type(y.__getitem__(0)) # N: Revealed type is "int | str"
reveal_type(y.index(0)) # N: Revealed type is "int"

[case tuple_methods_no_generic]
y: tuple
reveal_type(y.__getitem__(0)) # N: Revealed type is "Any"
reveal_type(y.index(0)) # N: Revealed type is "int"

[case tuple_inference]
from typing import TypeVar, Generic

T = TypeVar("T")

class A(Generic[T]): ...

x: tuple[A[int], ...] = (A(), A())
y: tuple[A[int], ...] = (A(), 1)  # E: Incompatible types in assignment (expression has type "tuple[A[int], int]", variable has type "tuple[A[int], ...]")

[case tuple_negative_index_out_of_range]
reveal_type((1, "")[-3])  # E: Tuple index out of range \
                          # N: Revealed type is "Any"

[case inheritance_tuple_mul]
from typing import Tuple

class T2(Tuple[int, str]): pass

x: T2
reveal_type(x * 2)  # N: Revealed type is "tuple[int, str, int, str]"
reveal_type(2 * x)  # N: Revealed type is "tuple[int, str, int, str]"

[case inheritance_tuple_add]
from typing import Tuple

class T2(Tuple[int, str]): pass

x: T2
reveal_type(x + (1.0,))  # N: Revealed type is "tuple[int, str, float]"
reveal_type((1.0,) + x)  # N: Revealed type is "tuple[float, int, str]"

[case tuple_slice_reverse_arbitrary_len]
x: tuple[int, ...]
reveal_type(x[42:])  # N: Revealed type is "tuple[int, ...]"
reveal_type(x[:42])  # N: Revealed type is "tuple[int, ...]"
reveal_type(x[::-3])  # N: Revealed type is "tuple[int, ...]"
reveal_type(x[::-3])  # N: Revealed type is "tuple[int, ...]"
reveal_type(x[0:0])  # N: Revealed type is "tuple[int, ...]"
reveal_type(x[-2:-5:-3])  # N: Revealed type is "tuple[int, ...]"
reveal_type(x[-2:-3])  # N: Revealed type is "tuple[int, ...]"
reveal_type(x[-5:-3])  # N: Revealed type is "tuple[int, ...]"

[case tuple_slice_step_zero]
from typing import Unpack
x: tuple[int, ...]
y: tuple[int, str]
z: tuple[int, Unpack[tuple[bytes, ...]], str]
reveal_type(x[::0])  # E: slice step cannot be zero  # N: Revealed type is "tuple[Any, ...]"
reveal_type(y[::-0])  # E: slice step cannot be zero  # N: Revealed type is "tuple[Any, ...]"
reveal_type(z[1:-1:0])  # E: slice step cannot be zero  # N: Revealed type is "tuple[Any, ...]"

x[-1::0] # E: slice step cannot be zero
y[-1:3:0] # E: slice step cannot be zero
z[:-5:0] # E: slice step cannot be zero

[case tuple_unpack_slice_to_fixed_len_before]
from typing import Unpack
def f(z: tuple[int, None, bytes, Unpack[tuple[float, ...]], str]):
    reveal_type(z[:0])  # N: Revealed type is "tuple[()]"
    reveal_type(z[0:0])  # N: Revealed type is "tuple[()]"
    reveal_type(z[1:0])  # N: Revealed type is "tuple[()]"
    reveal_type(z[:1])  # N: Revealed type is "tuple[int]"
    reveal_type(z[0:1])  # N: Revealed type is "tuple[int]"
    reveal_type(z[:2])  # N: Revealed type is "tuple[int, None]"
    reveal_type(z[0:2])  # N: Revealed type is "tuple[int, None]"
    reveal_type(z[0:3:2])  # N: Revealed type is "tuple[int, bytes]"
    z[:4]  # E: Ambiguous slice of a variadic tuple
    z[0:4]  # E: Ambiguous slice of a variadic tuple

    reveal_type(z[1:2])  # N: Revealed type is "tuple[None]"
    reveal_type(z[2:2])  # N: Revealed type is "tuple[()]"
    z[3:4]  # E: Ambiguous slice of a variadic tuple

    reveal_type(z[1:2:-1])  # N: Revealed type is "tuple[()]"
    reveal_type(z[2:0:-1])  # N: Revealed type is "tuple[bytes, None]"
    reveal_type(z[2::-1])  # N: Revealed type is "tuple[bytes, None, int]"
    reveal_type(z[3::-2])  # N: Revealed type is "tuple[bytes, int]"
    reveal_type(z[3:0:-2])  # N: Revealed type is "tuple[bytes]"
    reveal_type(z[2:2:-1])  # N: Revealed type is "tuple[()]"
    z[4:3:-1]  # E: Ambiguous slice of a variadic tuple

[case tuple_unpack_slice_to_fixed_len_after]
from typing import Unpack
def f(z: tuple[str, Unpack[tuple[float, ...]], bytes, None, int]):
    reveal_type(z[-1:-1])  # N: Revealed type is "tuple[()]"
    reveal_type(z[-1:])  # N: Revealed type is "tuple[int]"
    reveal_type(z[-2:])  # N: Revealed type is "tuple[None, int]"
    reveal_type(z[-3:])  # N: Revealed type is "tuple[bytes, None, int]"
    reveal_type(z[-3:-2])  # N: Revealed type is "tuple[bytes]"
    reveal_type(z[-3::2])  # N: Revealed type is "tuple[bytes, int]"
    reveal_type(z[-3:-1:2])  # N: Revealed type is "tuple[bytes]"
    reveal_type(z[-3:-4])  # N: Revealed type is "tuple[()]"
    z[-4:]  # E: Ambiguous slice of a variadic tuple
    z[-4:-3]  # E: Ambiguous slice of a variadic tuple
    z[-4:-5]  # E: Ambiguous slice of a variadic tuple

    reveal_type(z[-1:-2:-1])  # N: Revealed type is "tuple[int]"
    reveal_type(z[:-2:-1])  # N: Revealed type is "tuple[int]"
    reveal_type(z[:-3:-1])  # N: Revealed type is "tuple[int, None]"
    reveal_type(z[:-4:-1])  # N: Revealed type is "tuple[int, None, bytes]"
    reveal_type(z[-3:-3:-1])  # N: Revealed type is "tuple[()]"
    reveal_type(z[-2:-3:-1])  # N: Revealed type is "tuple[None]"
    reveal_type(z[-2:-3:-2])  # N: Revealed type is "tuple[None]"
    reveal_type(z[:-4:-2])  # N: Revealed type is "tuple[int, bytes]"
    reveal_type(z[-1:-4:-2])  # N: Revealed type is "tuple[int, bytes]"
    reveal_type(z[-1:-4:-3])  # N: Revealed type is "tuple[int]"
    reveal_type(z[-2:-4:-2])  # N: Revealed type is "tuple[None]"
    z[-4:-5:-1]  # E: Ambiguous slice of a variadic tuple

[case tuple_unpack_slice_indexing_results_in_unpack_again]
from typing import Unpack
def f(z: tuple[str, bool, Unpack[tuple[float, ...]], bytes, None, int]):
    reveal_type(z[:])  # N: Revealed type is "tuple[str, bool, Unpack[Tuple[float, ...]], bytes, None, int]"
    reveal_type(z[1:])  # N: Revealed type is "tuple[bool, Unpack[Tuple[float, ...]], bytes, None, int]"
    reveal_type(z[:-1])  # N: Revealed type is "tuple[str, bool, Unpack[Tuple[float, ...]], bytes, None]"
    reveal_type(z[1:-1])  # N: Revealed type is "tuple[bool, Unpack[Tuple[float, ...]], bytes, None]"
    reveal_type(z[2:-2])  # N: Revealed type is "tuple[Unpack[Tuple[float, ...]], bytes]"
    reveal_type(z[2:-2:1])  # N: Revealed type is "tuple[Unpack[Tuple[float, ...]], bytes]"
    reveal_type(z[2:-3])  # N: Revealed type is "tuple[float, ...]"
    z[3:-2]  # E: Ambiguous slice of a variadic tuple

    reveal_type(z[::-1])  # N: Revealed type is "tuple[int, None, bytes, Unpack[Tuple[float, ...]], bool, str]"
    reveal_type(z[-1::-1])  # N: Revealed type is "tuple[None, bytes, Unpack[Tuple[float, ...]], bool, str]"
    reveal_type(z[-1:1:-1])  # N: Revealed type is "tuple[None, bytes, Unpack[Tuple[float, ...]], bool]"
    reveal_type(z[-2:2:-1])  # N: Revealed type is "tuple[bytes, Unpack[Tuple[float, ...]]]"
    reveal_type(z[-3:2:-1])  # N: Revealed type is "tuple[float, ...]"
    z[-4:2:-1]  # E: Ambiguous slice of a variadic tuple
    z[-3:3:-1]  # E: Ambiguous slice of a variadic tuple
    z[-4:-5:-1]  # E: Ambiguous slice of a variadic tuple

    z[1:-1:2]  # E: Ambiguous slice of a variadic tuple
    z[1:-1:-2]  # E: Ambiguous slice of a variadic tuple
    z[-1:1:-2]  # E: Ambiguous slice of a variadic tuple

[case tuple_unpack_slice_incompatible_signs]
from typing import Unpack
def f(z: tuple[int, None, Unpack[tuple[bytes, ...]], str, float]):
    z[2:-5]  # E: Ambiguous slice of a variadic tuple
    z[-5:2]  # E: Ambiguous slice of a variadic tuple
    z[-1:1]  # E: Ambiguous slice of a variadic tuple
    z[-1:1]  # E: Ambiguous slice of a variadic tuple
    z[-1:0]  # E: Ambiguous slice of a variadic tuple
    z[1:-1:-1]  # E: Ambiguous slice of a variadic tuple

[case tuple_reverse_slice]
x: tuple[int, str, bytes]
reveal_type(x[::-1])  # N: Revealed type is "tuple[bytes, str, int]"
reveal_type(x[:1:-1])  # N: Revealed type is "tuple[bytes]"

reveal_type(x[2:1:-1])  # N: Revealed type is "tuple[bytes]"
reveal_type(x[3:1:-1])  # N: Revealed type is "tuple[bytes]"
reveal_type(x[1:1:-1])  # N: Revealed type is "tuple[()]"
reveal_type(x[1:0:-1])  # N: Revealed type is "tuple[str]"

reveal_type(x[1::-1])  # N: Revealed type is "tuple[str, int]"
reveal_type(x[0::-1])  # N: Revealed type is "tuple[int]"

[case tuple_reverse_slice_negative_indices]
x: tuple[int, str, bytes]

reveal_type(x[-3::-1])  # N: Revealed type is "tuple[int]"
reveal_type(x[:-2:-1])  # N: Revealed type is "tuple[bytes]"
reveal_type(x[:-4:-1])  # N: Revealed type is "tuple[bytes, str, int]"
reveal_type(x[-1:-1:-1])  # N: Revealed type is "tuple[()]"

reveal_type(x[-1:1:-1])  # N: Revealed type is "tuple[bytes]"
reveal_type(x[-1:0:-1])  # N: Revealed type is "tuple[bytes, str]"

reveal_type(x[2:-1:-1])  # N: Revealed type is "tuple[()]"
reveal_type(x[1:-2:-1])  # N: Revealed type is "tuple[()]"
reveal_type(x[2:-3:-1])  # N: Revealed type is "tuple[bytes, str]"

[case tuple_reverse_slice_bigger_step]
x: tuple[int, str, bytes, float]
reveal_type(x[::-2])  # N: Revealed type is "tuple[float, str]"
reveal_type(x[1::-2])  # N: Revealed type is "tuple[str]"
reveal_type(x[2::-2])  # N: Revealed type is "tuple[bytes, int]"

reveal_type(x[:1:-2])  # N: Revealed type is "tuple[float]"
reveal_type(x[:2:-2])  # N: Revealed type is "tuple[float]"
reveal_type(x[:3:-2])  # N: Revealed type is "tuple[()]"

reveal_type(x[3:1:-2])  # N: Revealed type is "tuple[float]"
reveal_type(x[-2:-4:-2])  # N: Revealed type is "tuple[bytes]"
reveal_type(x[-4:-2:-2])  # N: Revealed type is "tuple[()]"
reveal_type(x[-1:-4:-2])  # N: Revealed type is "tuple[float, str]"

reveal_type(x[2:-4:-2])  # N: Revealed type is "tuple[bytes]"

[case tuple_reverse_slice_out_of_bounds]
x: tuple[int, str, bytes]
reveal_type(x[20:2:-1])  # N: Revealed type is "tuple[()]"
reveal_type(x[20:19:-1])  # N: Revealed type is "tuple[()]"
reveal_type(x[12:19:-1])  # N: Revealed type is "tuple[()]"
reveal_type(x[12:19:-4])  # N: Revealed type is "tuple[()]"
reveal_type(x[:19:-1])  # N: Revealed type is "tuple[()]"
reveal_type(x[:19:-4])  # N: Revealed type is "tuple[()]"
reveal_type(x[:-12:-4])  # N: Revealed type is "tuple[bytes]"
reveal_type(x[-12::-4])  # N: Revealed type is "tuple[()]"
reveal_type(x[-13:-12:-1])  # N: Revealed type is "tuple[()]"
reveal_type(x[-12:-13:-1])  # N: Revealed type is "tuple[()]"
reveal_type(x[-12::-1])  # N: Revealed type is "tuple[()]"

[case tuple_star_args_at_least_size_one_narrowed]
def foo(tup: tuple[int, ...]) -> None:
    def f(*args: int) -> None: ...
    def g(x: int, *args: int) -> None: ...
    def h(x: int, y: int, *args: int) -> None: ...

    def i(*args: str) -> None: ...
    def j(x: str, *args: int) -> None: ...
    def k(x: int, *args: str) -> None: ...
    def l(x: str, *args: str) -> None: ...
    def m(x: str, y: str, *args: str) -> None: ...

    def n(x: int) -> None: ...
    def o(*, x: int) -> None: ...

    if tup:
        f(*tup)
        g(*tup)
        h(*tup)

        i(*tup)  # E: Argument 1 to "i" has incompatible type "*tuple[int, Unpack[Tuple[int, ...]]]"; expected "str" \
                 # E: Argument 1 to "i" has incompatible type "*tuple[Unpack[Tuple[int, ...]]]"; expected "str"
        j(*tup)  # E: Argument 1 to "j" has incompatible type "*tuple[int, Unpack[Tuple[int, ...]]]"; expected "str"
        k(*tup)  # E: Argument 1 to "k" has incompatible type "*tuple[Unpack[Tuple[int, ...]]]"; expected "str"
        l(*tup)  # E: Argument 1 to "l" has incompatible type "*tuple[int, Unpack[Tuple[int, ...]]]"; expected "str" \
                 # E: Argument 1 to "l" has incompatible type "*tuple[Unpack[Tuple[int, ...]]]"; expected "str"
        m(*tup)  # E: Argument 1 to "m" has incompatible type "*tuple[int, Unpack[Tuple[int, ...]]]"; expected "str" \
                 # E: Argument 1 to "m" has incompatible type "*tuple[Unpack[Tuple[int, ...]]]"; expected "str" \
                 # E: Argument 1 to "m" has incompatible type "*tuple[Unpack[Tuple[int, ...]]]"; expected "str"

        n(*tup)
        o(*tup)  # E: Too many positional arguments for "o"

[case tuple_star_args_at_least_size_one_narrowed_variance]
def foo(tup1: tuple[int, ...], tup2: tuple[object, ...]) -> None:
    def f(*args: int) -> None: ...
    def g(x: int, *args: int) -> None: ...
    def h(x: int, y: int, *args: int) -> None: ...

    def x(*args: object) -> None: ...
    def y(x: object, *args: object) -> None: ...
    def z(x: object, y: object, *args: object) -> None: ...

    if tup1:
        if tup2:
            f(*tup1)
            g(*tup1)
            h(*tup1)

            f(*tup2)  # E: Argument 1 to "f" has incompatible type "*tuple[object, Unpack[Tuple[object, ...]]]"; expected "int" \
                      # E: Argument 1 to "f" has incompatible type "*tuple[Unpack[Tuple[object, ...]]]"; expected "int"
            g(*tup2)  # E: Argument 1 to "g" has incompatible type "*tuple[object, Unpack[Tuple[object, ...]]]"; expected "int" \
                      # E: Argument 1 to "g" has incompatible type "*tuple[Unpack[Tuple[object, ...]]]"; expected "int"
            h(*tup2)  # E: Argument 1 to "h" has incompatible type "*tuple[object, Unpack[Tuple[object, ...]]]"; expected "int" \
                      # E: Argument 1 to "h" has incompatible type "*tuple[Unpack[Tuple[object, ...]]]"; expected "int" \
                      # E: Argument 1 to "h" has incompatible type "*tuple[Unpack[Tuple[object, ...]]]"; expected "int"

            x(*tup1)
            y(*tup1)
            z(*tup1)

            x(*tup2)
            y(*tup2)
            z(*tup2)


[case tuple_star_args_at_least_size_one_narrowed_type_var]
from typing import TypeVar
T = TypeVar("T")

def foo(tup: tuple[int, ...]) -> None:
    def f(*args: T) -> T: ...
    def g(x: T, *args: T) -> T: ...
    def h(x: T, y: T, *args: T) -> T: ...
    def i(x: T, *args: int) -> T: ...
    def j(x: int, *args: T) -> T: ...

    if tup:
        reveal_type(f(*tup))  # N: Revealed type is "int"
        reveal_type(g(*tup))  # N: Revealed type is "int"
        reveal_type(h(*tup))  # N: Revealed type is "int"
        reveal_type(i(*tup))  # N: Revealed type is "int"
        reveal_type(j(*tup))  # N: Revealed type is "int"

[case with_unpack_function_args]
def foo(
        tup1: tuple[int, int, *tuple[int, ...], int],
        tup2: tuple[int, int, *tuple[int, ...], str],
        tup3: tuple[str, int, *tuple[int, ...], int],
        tup4: tuple[int, int, *tuple[str, ...], int],
        ) -> None:
    def f(x: int, y: int, *args: int) -> None: ...
    def g(x: str, y: int, *args: int) -> None: ...
    def h(x: str, y: int, z: int) -> None: ...

    f(*tup1)
    f(*tup2)  # E: Argument 1 to "f" has incompatible type "*tuple[Unpack[Tuple[int, ...]], str]"; expected "int"
    f(*tup3)  # E: Argument 1 to "f" has incompatible type "*tuple[str, int, Unpack[Tuple[int, ...]], int]"; expected "int"

    g(*tup1)  # E: Argument 1 to "g" has incompatible type "*tuple[int, int, Unpack[Tuple[int, ...]], int]"; expected "str"
    g(*tup2)  # E: Argument 1 to "g" has incompatible type "*tuple[int, int, Unpack[Tuple[int, ...]], str]"; expected "str" \
              # E: Argument 1 to "g" has incompatible type "*tuple[Unpack[Tuple[int, ...]], str]"; expected "int"
    g(*tup3)

    h(*tup1)  # E: Argument 1 to "h" has incompatible type "*tuple[int, int, Unpack[Tuple[int, ...]], int]"; expected "str"
    h(*tup2)  # E: Argument 1 to "h" has incompatible type "*tuple[int, int, Unpack[Tuple[int, ...]], str]"; expected "str" \
              # E: Argument 1 to "h" has incompatible type "*tuple[Unpack[Tuple[int, ...]], str]"; expected "int"
    h(*tup3)
    h(*tup4)  # E: Argument 1 to "h" has incompatible type "*tuple[int, int, Unpack[Tuple[str, ...]], int]"; expected "str" \
              # E: Argument 1 to "h" has incompatible type "*tuple[Unpack[Tuple[str, ...]], int]"; expected "int"

[case valid_slice_args]
def foo(x: tuple[int, str], z: int | None) -> None:
    reveal_type(x[z:])  # N: Revealed type is "tuple[int | str, ...]"

[case tuple_execution]
from typing import Iterable
def foo(x: Iterable[int], y: tuple[int, str]) -> None:
    reveal_type(tuple(x))  # N: Revealed type is "tuple[int, ...]"
    reveal_type(tuple(y))  # N: Revealed type is "tuple[int | str, ...]"
    reveal_type(tuple())  # N: Revealed type is "tuple[Never, ...]"

[case tuple_execution_with_context]
def foo(wanted: tuple[list[int], ...]) -> None:
    wanted = tuple([[]])
    wanted = tuple([[1]])

[case tuple_in_setattr]
def foo(dct: dict[tuple[int, str], str]) -> None:
    dct[(1, "")] = ""
    dct[1, ""] = ""
    dct[1.0, ""] = "" # E: Invalid index type "tuple[float, str]" for "dict[tuple[int, str], str]"; expected type "tuple[int, str]"
    dct[1] = ""  # E: Invalid index type "int" for "dict[tuple[int, str], str]"; expected type "tuple[int, str]"

    dct[(1, "")]
    dct[1, ""]
    dct[1.0, ""]  # E: Invalid index type "tuple[float, str]" for "dict[tuple[int, str], str]"; expected type "tuple[int, str]"
    dct[1]  # E: Invalid index type "int" for "dict[tuple[int, str], str]"; expected type "tuple[int, str]"

[case tuple_subtype_as_iterable]
from typing import Iterable
class Tup(tuple[int, float]): ...

def foo(t1: Tup, t2: tuple[int, float]) -> None:
    x1: Iterable[float] = t1
    x2: Iterable[float] = t2

    y1: Iterable[int] = t1  # E: Incompatible types in assignment (expression has type "Tup", variable has type "Iterable[int]")
    y2: Iterable[int] = t2  # E: Incompatible types in assignment (expression has type "tuple[int, float]", variable has type "Iterable[int]")

[case tuple_with_slices]
()[1,1]  # E: No overload variant of "__getitem__" of "tuple" matches argument type "tuple[int, int]" \
         # N: Possible overload variants: \
         # N:     def __getitem__(self, SupportsIndex, /) -> Any \
         # N:     def __getitem__(self, slice[Any, Any, Any], /) -> tuple[Any, ...]
(1, 1)[1,1]  # E: No overload variant of "__getitem__" of "tuple" matches argument type "tuple[int, int]" \
             # N: Possible overload variants: \
             # N:     def __getitem__(self, SupportsIndex, /) -> Any \
             # N:     def __getitem__(self, slice[Any, Any, Any], /) -> tuple[Any, ...]

[case tuple_with_star_index]
(1, "")[*()]  # E: No overload variant of "__getitem__" of "tuple" matches argument type "object" \
              # N: Possible overload variants: \
              # N:     def __getitem__(self, SupportsIndex, /) -> Any \
              # N:     def __getitem__(self, slice[Any, Any, Any], /) -> tuple[Any, ...]

[case with_unpack_tuple_args_too_few_args]
from typing import TypeVarTuple
Ts = TypeVarTuple("Ts")

def foo(*args: *tuple[*Ts, int, str]): ...

def bar(*ts: *Ts):
    foo(*(*ts, 1, ""))
    foo(*(*ts, ""))  # E: Too few arguments for "foo"
    foo(*ts)  # E: Too few arguments for "foo"

    foo(*ts, 1, "")
    foo(*ts, 1)  # E: Too few arguments for "foo"  # E: Argument 2 to "foo" has incompatible type "int"; expected "str"
    foo(*ts, "")  # E: Too few arguments for "foo"
    foo(*ts, "", "")  # E: Argument 2 to "foo" has incompatible type "str"; expected "int"
    foo(*ts, 1, 1)  # E: Argument 3 to "foo" has incompatible type "int"; expected "str"
    foo(1, *ts, 1, 1)  # E: Argument 4 to "foo" has incompatible type "int"; expected "str"

[case tuple_arbitrary_len_against_unpack_matching_with_type_var_tuple]
from typing import TypeVarTuple, TypeVar, Any
Ts = TypeVarTuple("Ts")
T = TypeVar("T")

def f1(*args: int) -> Any: ...
def f2(*args: int | str) -> Any: ...
def f3(*args: int | str | bytes) -> Any: ...

def b(*args: *tuple[*Ts, int | str]) -> Any: ...

f1 = b
f2 = b
f3 = b  # E: Incompatible types in assignment (expression has type "Callable[[VarArg(Unpack[tuple[Unpack[Ts], int | str]])], Any]", variable has type "Callable[[VarArg(int | str | bytes)], Any]")

def g1(tup: tuple[int, int], *args: int) -> Any: ...
def g2(tup: tuple[str, str], *args: int) -> Any: ...
def g3(tup: tuple[int, ...], *args: int) -> Any: ...
def g4(tup: tuple[str, ...], *args: int) -> Any: ...

def c(tup: tuple[*Ts], *args: *tuple[*Ts, int]) -> Any: ...

g1 = c  # E: Incompatible types in assignment (expression has type "Callable[[tuple[Unpack[Ts]], VarArg(Unpack[tuple[Unpack[Ts], int]])], Any]", variable has type "Callable[[tuple[int, int], VarArg(int)], Any]")
g2 = c  # E: Incompatible types in assignment (expression has type "Callable[[tuple[Unpack[Ts]], VarArg(Unpack[tuple[Unpack[Ts], int]])], Any]", variable has type "Callable[[tuple[str, str], VarArg(int)], Any]")
g3 = c
g4 = c  # E: Incompatible types in assignment (expression has type "Callable[[tuple[Unpack[Ts]], VarArg(Unpack[tuple[Unpack[Ts], int]])], Any]", variable has type "Callable[[tuple[str, ...], VarArg(int)], Any]")

[case common_base_type_for_fixed_len_tuple_mypy_compatible]
# flags: --mypy-compatible --use-joins
x = [
    (1, ""),
    (1, b''),
]
reveal_type(x)  # N: Revealed type is "list[tuple[int, typing.Sequence[object]]]"

[case common_base_type_for_fixed_len_tuple_no_mypy_compatible]
# flags: --no-mypy-compatible --use-joins
x = [
    (1, ""),
    (1, b''),
]
reveal_type(x)  # N: Revealed type is "list[tuple[int, str | bytes]]"

[case common_base_type_for_arbitrary_len_tuple_mypy_compatible]
# flags: --mypy-compatible
def f(x: tuple[str, ...], y: tuple[bytes, ...]):
    t = [x, y]
    reveal_type(t)  # N: Revealed type is "list[tuple[typing.Sequence[object], ...]]"

[case common_base_type_for_arbitrary_len_tuple_no_mypy_compatible]
# flags: --no-mypy-compatible --use-joins
def f(x: tuple[str, ...], y: tuple[bytes, ...]):
    t = [x, y]
    reveal_type(t)  # N: Revealed type is "list[tuple[str | bytes, ...]]"

[case common_base_type_for_arbitrary_vs_fixed_len_tuple_mypy_compatible]
# flags: --mypy-compatible
def f(x: tuple[str, ...], y: tuple[bytes]):
    t1 = [x, y]
    reveal_type(t1)  # N: Revealed type is "list[tuple[typing.Sequence[object], ...]]"
    t2 = [x, y]
    reveal_type(t2)  # N: Revealed type is "list[tuple[typing.Sequence[object], ...]]"

[case common_base_type_for_arbitrary_vs_fixed_len_tuple_no_mypy_compatible]
# flags: --no-mypy-compatible --use-joins
def f(x: tuple[str, ...], y: tuple[bytes, ...]):
    t1 = [x, y]
    reveal_type(t1)  # N: Revealed type is "list[tuple[str | bytes, ...]]"
    t2 = [x, y]
    reveal_type(t2)  # N: Revealed type is "list[tuple[str | bytes, ...]]"

[case common_base_type_for_different_fixed_len_tuples_mypy_compatible]
# flags: --mypy-compatible
def f(x: tuple[str, bytes], y: tuple[str]):
    t1 = [x, y]
    reveal_type(t1)  # N: Revealed type is "list[tuple[typing.Sequence[object], ...]]"
    t2 = [x, y]
    reveal_type(t2)  # N: Revealed type is "list[tuple[typing.Sequence[object], ...]]"

[case common_base_type_for_different_fixed_len_tuples_no_mypy_compatible]
# flags: --no-mypy-compatible --use-joins
def f(x: tuple[str, bytes], y: tuple[str]):
    t1 = [x, y]
    reveal_type(t1)  # N: Revealed type is "list[tuple[str | bytes, ...]]"
    t2 = [x, y]
    reveal_type(t2)  # N: Revealed type is "list[tuple[str | bytes, ...]]"

[case unpack_simplification_no_crash]
# flags: --allow-redefinition
def f(z: tuple[tuple[str, int], ...]) -> None:
    x = z
    if x and x[0][0] == "":
        x = x[1:]
        reveal_type(x)  # N: Revealed type is "tuple[tuple[str, int], ...]"

[case arbitrary_len_tuple_definitions_in_conformance_tests]
t30: tuple[int, ...]  # OK
t31: tuple[int, int, ...]  # E: Unexpected "..."
t32: tuple[...]  # E: Unexpected "..."
t33: tuple[..., int]  # E: Unexpected "..."
t34: tuple[int, ..., int]  # E: Unexpected "..."
t35: tuple[*tuple[str], ...]  # E: Unpack is only valid in a variadic position
t36: tuple[*tuple[str, ...], ...]  # E: Unpack is only valid in a variadic position

[case tuple_len_narrowing_with_unpack_should_not_be_unreachable]
# flags: --warn-unreachable
# Fixes #46
foo: tuple[int, ...] = (1, 2)
if len(foo) > 1:
    reveal_type(foo)  # N: Revealed type is "tuple[int, int, Unpack[Tuple[int, ...]]]"
    if len(foo) == 1:
        reveal_type(foo)  # E: Statement is unreachable
    if len(foo) == 2:
        reveal_type(foo)  # N: Revealed type is "tuple[int, int]"
    if len(foo) == 3:
        reveal_type(foo)  # N: Revealed type is "tuple[int, int, int]"

[case tuple_invariant_matching_against_any]
# From GH #89
from typing import Any, Unpack

async def foo(ops: list[tuple[Any, ...]]) -> None:
    await bar1(ops)
    await bar2(ops)
    await bar3(ops)
    await bar4(ops)

async def bar1(ops: list[tuple[str, int]]) -> None:
    await foo(ops)

async def bar2(ops: list[tuple[str, *tuple[str, ...], int]]) -> None:
    await foo(ops)
    await bar1(ops)  # E: Argument 1 to "bar1" has incompatible type "list[tuple[str, Unpack[Tuple[str, ...]], int]]"; expected "list[tuple[str, int]]"

async def bar3[*Ts](ops: list[tuple[str, *Ts, int]]) -> None:
    await foo(ops)
    await bar1(ops)  # E: Argument 1 to "bar1" has incompatible type "list[tuple[str, Unpack[Ts], int]]"; expected "list[tuple[str, int]]"

async def bar4(ops: list[tuple[int | str, ...]]) -> None:
    await foo(ops)
    await bar1(ops)  # E: Argument 1 to "bar1" has incompatible type "list[tuple[int | str, ...]]"; expected "list[tuple[str, int]]"
